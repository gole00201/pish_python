1. Структура языков программирования: компилируемые и интерпретируемые языки.

2. Что такое транслятор? Различия между компиляцией и интерпретацией.

3. Преимущества и недостатки Python по сравнению с другими языками.

4. Строки в Python: структура, методы и операции.

5. Списки: определение, основные операции и методы.

6. Стандартные простые типы данных: целые числа, числа с плавающей точкой, строки.

7. Определение и реализация массива. Как организуется память под массив?

8. Кортежи: особенности и отличия от списков.

9. Множества в Python: методы и операции.

10. Сравнение списков, кортежей и множеств.

11. Использование словарей: ключи, значения и методы работы.

12. Определение и синтаксис функций в Python.

13. Параметры функций: позиционные, именованные и значения по умолчанию.

14. Рекурсивные функции и их применение.

15. Стек вызова функций: что это и как он работает?

16. Открытие и закрытие файлов: режимы чтения и записи.

17. Работа с текстовыми и бинарными файлами.

18. Методы read(), write().

19. Что такое модули и пакеты в Python? Их назначение и структура.

20. Импорт модулей: полные и частичные импорты.

21. Что такое lambda-выражение в Python?

22. Чем lambda-функции отличаются от обычных функций, определённых с помощью def?

23. Каков синтаксис lambda-выражения?

24. В каких случаях удобно использовать lambda-выражения?

25. Можно ли в lambda-выражениях использовать несколько операторов? Почему?

26. Что такое анонимные функции и почему lambda-функции называют анонимными?

27. Примеры использования lambda-выражений:

28. Как использовать lambda-функцию с условием (тернарным оператором)?

29. Можно ли присваивать lambda-выражение переменной?
